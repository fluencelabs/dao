// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Account entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Account entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Account", id.toString(), this);
  }

  static load(id: string): Account | null {
    return store.get("Account", id) as Account | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asGovernor(): string | null {
    let value = this.get("asGovernor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asGovernor(value: string | null) {
    if (value === null) {
      this.unset("asGovernor");
    } else {
      this.set("asGovernor", Value.fromString(value as string));
    }
  }

  get asToken(): string | null {
    let value = this.get("asToken");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asToken(value: string | null) {
    if (value === null) {
      this.unset("asToken");
    } else {
      this.set("asToken", Value.fromString(value as string));
    }
  }

  get asTimelock(): string | null {
    let value = this.get("asTimelock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asTimelock(value: string | null) {
    if (value === null) {
      this.unset("asTimelock");
    } else {
      this.set("asTimelock", Value.fromString(value as string));
    }
  }

  get compFor(): Array<string> {
    let value = this.get("compFor");
    return value.toStringArray();
  }

  set compFor(value: Array<string>) {
    this.set("compFor", Value.fromStringArray(value));
  }

  get timelockFor(): Array<string> {
    let value = this.get("timelockFor");
    return value.toStringArray();
  }

  set timelockFor(value: Array<string>) {
    this.set("timelockFor", Value.fromStringArray(value));
  }

  get guardianFor(): Array<string> {
    let value = this.get("guardianFor");
    return value.toStringArray();
  }

  set guardianFor(value: Array<string>) {
    this.set("guardianFor", Value.fromStringArray(value));
  }

  get adminForGovernor(): Array<string> {
    let value = this.get("adminForGovernor");
    return value.toStringArray();
  }

  set adminForGovernor(value: Array<string>) {
    this.set("adminForGovernor", Value.fromStringArray(value));
  }

  get pendingAdminForGovernor(): Array<string> {
    let value = this.get("pendingAdminForGovernor");
    return value.toStringArray();
  }

  set pendingAdminForGovernor(value: Array<string>) {
    this.set("pendingAdminForGovernor", Value.fromStringArray(value));
  }

  get implementationForGovernor(): Array<string> {
    let value = this.get("implementationForGovernor");
    return value.toStringArray();
  }

  set implementationForGovernor(value: Array<string>) {
    this.set("implementationForGovernor", Value.fromStringArray(value));
  }

  get proposals(): Array<string> {
    let value = this.get("proposals");
    return value.toStringArray();
  }

  set proposals(value: Array<string>) {
    this.set("proposals", Value.fromStringArray(value));
  }

  get targetedCalls(): Array<string> {
    let value = this.get("targetedCalls");
    return value.toStringArray();
  }

  set targetedCalls(value: Array<string>) {
    this.set("targetedCalls", Value.fromStringArray(value));
  }

  get receipts(): Array<string> {
    let value = this.get("receipts");
    return value.toStringArray();
  }

  set receipts(value: Array<string>) {
    this.set("receipts", Value.fromStringArray(value));
  }

  get proposalCreated(): Array<string> {
    let value = this.get("proposalCreated");
    return value.toStringArray();
  }

  set proposalCreated(value: Array<string>) {
    this.set("proposalCreated", Value.fromStringArray(value));
  }

  get votecast(): Array<string> {
    let value = this.get("votecast");
    return value.toStringArray();
  }

  set votecast(value: Array<string>) {
    this.set("votecast", Value.fromStringArray(value));
  }

  get balances(): Array<string> {
    let value = this.get("balances");
    return value.toStringArray();
  }

  set balances(value: Array<string>) {
    this.set("balances", Value.fromStringArray(value));
  }

  get transfersFrom(): Array<string> {
    let value = this.get("transfersFrom");
    return value.toStringArray();
  }

  set transfersFrom(value: Array<string>) {
    this.set("transfersFrom", Value.fromStringArray(value));
  }

  get transfersTo(): Array<string> {
    let value = this.get("transfersTo");
    return value.toStringArray();
  }

  set transfersTo(value: Array<string>) {
    this.set("transfersTo", Value.fromStringArray(value));
  }

  get approvalsOwner(): Array<string> {
    let value = this.get("approvalsOwner");
    return value.toStringArray();
  }

  set approvalsOwner(value: Array<string>) {
    this.set("approvalsOwner", Value.fromStringArray(value));
  }

  get approvalsSpender(): Array<string> {
    let value = this.get("approvalsSpender");
    return value.toStringArray();
  }

  set approvalsSpender(value: Array<string>) {
    this.set("approvalsSpender", Value.fromStringArray(value));
  }

  get adminForTimelock(): Array<string> {
    let value = this.get("adminForTimelock");
    return value.toStringArray();
  }

  set adminForTimelock(value: Array<string>) {
    this.set("adminForTimelock", Value.fromStringArray(value));
  }

  get pendingAdminForTimelock(): Array<string> {
    let value = this.get("pendingAdminForTimelock");
    return value.toStringArray();
  }

  set pendingAdminForTimelock(value: Array<string>) {
    this.set("pendingAdminForTimelock", Value.fromStringArray(value));
  }

  get targetedTransactions(): Array<string> {
    let value = this.get("targetedTransactions");
    return value.toStringArray();
  }

  set targetedTransactions(value: Array<string>) {
    this.set("targetedTransactions", Value.fromStringArray(value));
  }
}

export class Governor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Governor entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Governor entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Governor", id.toString(), this);
  }

  static load(id: string): Governor | null {
    return store.get("Governor", id) as Governor | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get comp(): string | null {
    let value = this.get("comp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set comp(value: string | null) {
    if (value === null) {
      this.unset("comp");
    } else {
      this.set("comp", Value.fromString(value as string));
    }
  }

  get timelock(): string | null {
    let value = this.get("timelock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timelock(value: string | null) {
    if (value === null) {
      this.unset("timelock");
    } else {
      this.set("timelock", Value.fromString(value as string));
    }
  }

  get guardian(): string | null {
    let value = this.get("guardian");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set guardian(value: string | null) {
    if (value === null) {
      this.unset("guardian");
    } else {
      this.set("guardian", Value.fromString(value as string));
    }
  }

  get admin(): string | null {
    let value = this.get("admin");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set admin(value: string | null) {
    if (value === null) {
      this.unset("admin");
    } else {
      this.set("admin", Value.fromString(value as string));
    }
  }

  get pendingAdmin(): string | null {
    let value = this.get("pendingAdmin");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pendingAdmin(value: string | null) {
    if (value === null) {
      this.unset("pendingAdmin");
    } else {
      this.set("pendingAdmin", Value.fromString(value as string));
    }
  }

  get implementation(): string | null {
    let value = this.get("implementation");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set implementation(value: string | null) {
    if (value === null) {
      this.unset("implementation");
    } else {
      this.set("implementation", Value.fromString(value as string));
    }
  }

  get quorumVotes(): BigInt | null {
    let value = this.get("quorumVotes");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set quorumVotes(value: BigInt | null) {
    if (value === null) {
      this.unset("quorumVotes");
    } else {
      this.set("quorumVotes", Value.fromBigInt(value as BigInt));
    }
  }

  get proposalThreshold(): BigInt | null {
    let value = this.get("proposalThreshold");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proposalThreshold(value: BigInt | null) {
    if (value === null) {
      this.unset("proposalThreshold");
    } else {
      this.set("proposalThreshold", Value.fromBigInt(value as BigInt));
    }
  }

  get proposalMaxOperations(): BigInt | null {
    let value = this.get("proposalMaxOperations");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proposalMaxOperations(value: BigInt | null) {
    if (value === null) {
      this.unset("proposalMaxOperations");
    } else {
      this.set("proposalMaxOperations", Value.fromBigInt(value as BigInt));
    }
  }

  get votingDelay(): BigInt | null {
    let value = this.get("votingDelay");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set votingDelay(value: BigInt | null) {
    if (value === null) {
      this.unset("votingDelay");
    } else {
      this.set("votingDelay", Value.fromBigInt(value as BigInt));
    }
  }

  get votingPeriod(): BigInt | null {
    let value = this.get("votingPeriod");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set votingPeriod(value: BigInt | null) {
    if (value === null) {
      this.unset("votingPeriod");
    } else {
      this.set("votingPeriod", Value.fromBigInt(value as BigInt));
    }
  }

  get proposalCount(): i32 {
    let value = this.get("proposalCount");
    return value.toI32();
  }

  set proposalCount(value: i32) {
    this.set("proposalCount", Value.fromI32(value));
  }

  get queuedProposalCount(): i32 {
    let value = this.get("queuedProposalCount");
    return value.toI32();
  }

  set queuedProposalCount(value: i32) {
    this.set("queuedProposalCount", Value.fromI32(value));
  }

  get executedProposalCount(): i32 {
    let value = this.get("executedProposalCount");
    return value.toI32();
  }

  set executedProposalCount(value: i32) {
    this.set("executedProposalCount", Value.fromI32(value));
  }

  get canceledProposalCount(): i32 {
    let value = this.get("canceledProposalCount");
    return value.toI32();
  }

  set canceledProposalCount(value: i32) {
    this.set("canceledProposalCount", Value.fromI32(value));
  }

  get proposals(): Array<string> {
    let value = this.get("proposals");
    return value.toStringArray();
  }

  set proposals(value: Array<string>) {
    this.set("proposals", Value.fromStringArray(value));
  }

  get proposalCreated(): Array<string> {
    let value = this.get("proposalCreated");
    return value.toStringArray();
  }

  set proposalCreated(value: Array<string>) {
    this.set("proposalCreated", Value.fromStringArray(value));
  }

  get proposalQueued(): Array<string> {
    let value = this.get("proposalQueued");
    return value.toStringArray();
  }

  set proposalQueued(value: Array<string>) {
    this.set("proposalQueued", Value.fromStringArray(value));
  }

  get proposalExecuted(): Array<string> {
    let value = this.get("proposalExecuted");
    return value.toStringArray();
  }

  set proposalExecuted(value: Array<string>) {
    this.set("proposalExecuted", Value.fromStringArray(value));
  }

  get proposalCanceled(): Array<string> {
    let value = this.get("proposalCanceled");
    return value.toStringArray();
  }

  set proposalCanceled(value: Array<string>) {
    this.set("proposalCanceled", Value.fromStringArray(value));
  }

  get votecast(): Array<string> {
    let value = this.get("votecast");
    return value.toStringArray();
  }

  set votecast(value: Array<string>) {
    this.set("votecast", Value.fromStringArray(value));
  }

  get newAdmin(): Array<string> {
    let value = this.get("newAdmin");
    return value.toStringArray();
  }

  set newAdmin(value: Array<string>) {
    this.set("newAdmin", Value.fromStringArray(value));
  }

  get newPendingAdmin(): Array<string> {
    let value = this.get("newPendingAdmin");
    return value.toStringArray();
  }

  set newPendingAdmin(value: Array<string>) {
    this.set("newPendingAdmin", Value.fromStringArray(value));
  }

  get newImplementation(): Array<string> {
    let value = this.get("newImplementation");
    return value.toStringArray();
  }

  set newImplementation(value: Array<string>) {
    this.set("newImplementation", Value.fromStringArray(value));
  }

  get proposalThresholdSet(): Array<string> {
    let value = this.get("proposalThresholdSet");
    return value.toStringArray();
  }

  set proposalThresholdSet(value: Array<string>) {
    this.set("proposalThresholdSet", Value.fromStringArray(value));
  }

  get votingDelaySet(): Array<string> {
    let value = this.get("votingDelaySet");
    return value.toStringArray();
  }

  set votingDelaySet(value: Array<string>) {
    this.set("votingDelaySet", Value.fromStringArray(value));
  }

  get votingPeriodSet(): Array<string> {
    let value = this.get("votingPeriodSet");
    return value.toStringArray();
  }

  set votingPeriodSet(value: Array<string>) {
    this.set("votingPeriodSet", Value.fromStringArray(value));
  }
}

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Proposal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Proposal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Proposal", id.toString(), this);
  }

  static load(id: string): Proposal | null {
    return store.get("Proposal", id) as Proposal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get governor(): string {
    let value = this.get("governor");
    return value.toString();
  }

  set governor(value: string) {
    this.set("governor", Value.fromString(value));
  }

  get proposalId(): BigInt {
    let value = this.get("proposalId");
    return value.toBigInt();
  }

  set proposalId(value: BigInt) {
    this.set("proposalId", Value.fromBigInt(value));
  }

  get proposer(): string {
    let value = this.get("proposer");
    return value.toString();
  }

  set proposer(value: string) {
    this.set("proposer", Value.fromString(value));
  }

  get eta(): BigInt | null {
    let value = this.get("eta");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eta(value: BigInt | null) {
    if (value === null) {
      this.unset("eta");
    } else {
      this.set("eta", Value.fromBigInt(value as BigInt));
    }
  }

  get startBlock(): BigInt | null {
    let value = this.get("startBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set startBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("startBlock");
    } else {
      this.set("startBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get endBlock(): BigInt | null {
    let value = this.get("endBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("endBlock");
    } else {
      this.set("endBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get forVotes(): string {
    let value = this.get("forVotes");
    return value.toString();
  }

  set forVotes(value: string) {
    this.set("forVotes", Value.fromString(value));
  }

  get againstVotes(): string {
    let value = this.get("againstVotes");
    return value.toString();
  }

  set againstVotes(value: string) {
    this.set("againstVotes", Value.fromString(value));
  }

  get abstainVotes(): string {
    let value = this.get("abstainVotes");
    return value.toString();
  }

  set abstainVotes(value: string) {
    this.set("abstainVotes", Value.fromString(value));
  }

  get canceled(): boolean {
    let value = this.get("canceled");
    return value.toBoolean();
  }

  set canceled(value: boolean) {
    this.set("canceled", Value.fromBoolean(value));
  }

  get executed(): boolean {
    let value = this.get("executed");
    return value.toBoolean();
  }

  set executed(value: boolean) {
    this.set("executed", Value.fromBoolean(value));
  }

  get title(): string | null {
    let value = this.get("title");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (value === null) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(value as string));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (value === null) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(value as string));
    }
  }

  get calls(): Array<string> {
    let value = this.get("calls");
    return value.toStringArray();
  }

  set calls(value: Array<string>) {
    this.set("calls", Value.fromStringArray(value));
  }

  get receipts(): Array<string> {
    let value = this.get("receipts");
    return value.toStringArray();
  }

  set receipts(value: Array<string>) {
    this.set("receipts", Value.fromStringArray(value));
  }

  get proposalCreated(): Array<string> {
    let value = this.get("proposalCreated");
    return value.toStringArray();
  }

  set proposalCreated(value: Array<string>) {
    this.set("proposalCreated", Value.fromStringArray(value));
  }

  get proposalQueued(): Array<string> {
    let value = this.get("proposalQueued");
    return value.toStringArray();
  }

  set proposalQueued(value: Array<string>) {
    this.set("proposalQueued", Value.fromStringArray(value));
  }

  get proposalExecuted(): Array<string> {
    let value = this.get("proposalExecuted");
    return value.toStringArray();
  }

  set proposalExecuted(value: Array<string>) {
    this.set("proposalExecuted", Value.fromStringArray(value));
  }

  get proposalCanceled(): Array<string> {
    let value = this.get("proposalCanceled");
    return value.toStringArray();
  }

  set proposalCanceled(value: Array<string>) {
    this.set("proposalCanceled", Value.fromStringArray(value));
  }

  get votecast(): Array<string> {
    let value = this.get("votecast");
    return value.toStringArray();
  }

  set votecast(value: Array<string>) {
    this.set("votecast", Value.fromStringArray(value));
  }
}

export class ProposalCall extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProposalCall entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProposalCall entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProposalCall", id.toString(), this);
  }

  static load(id: string): ProposalCall | null {
    return store.get("ProposalCall", id) as ProposalCall | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get index(): i32 {
    let value = this.get("index");
    return value.toI32();
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get target(): string {
    let value = this.get("target");
    return value.toString();
  }

  set target(value: string) {
    this.set("target", Value.fromString(value));
  }

  get value(): BigInt | null {
    let value = this.get("value");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt | null) {
    if (value === null) {
      this.unset("value");
    } else {
      this.set("value", Value.fromBigInt(value as BigInt));
    }
  }

  get signature(): string | null {
    let value = this.get("signature");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signature(value: string | null) {
    if (value === null) {
      this.unset("signature");
    } else {
      this.set("signature", Value.fromString(value as string));
    }
  }

  get calldata(): Bytes | null {
    let value = this.get("calldata");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set calldata(value: Bytes | null) {
    if (value === null) {
      this.unset("calldata");
    } else {
      this.set("calldata", Value.fromBytes(value as Bytes));
    }
  }
}

export class Receipt extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Receipt entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Receipt entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Receipt", id.toString(), this);
  }

  static load(id: string): Receipt | null {
    return store.get("Receipt", id) as Receipt | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get voter(): string {
    let value = this.get("voter");
    return value.toString();
  }

  set voter(value: string) {
    this.set("voter", Value.fromString(value));
  }

  get support(): string {
    let value = this.get("support");
    return value.toString();
  }

  set support(value: string) {
    this.set("support", Value.fromString(value));
  }

  get votes(): string {
    let value = this.get("votes");
    return value.toString();
  }

  set votes(value: string) {
    this.set("votes", Value.fromString(value));
  }

  get votesExact(): BigInt {
    let value = this.get("votesExact");
    return value.toBigInt();
  }

  set votesExact(value: BigInt) {
    this.set("votesExact", Value.fromBigInt(value));
  }
}

export class ProposalCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProposalCreated entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProposalCreated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProposalCreated", id.toString(), this);
  }

  static load(id: string): ProposalCreated | null {
    return store.get("ProposalCreated", id) as ProposalCreated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get governor(): string {
    let value = this.get("governor");
    return value.toString();
  }

  set governor(value: string) {
    this.set("governor", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get proposer(): string {
    let value = this.get("proposer");
    return value.toString();
  }

  set proposer(value: string) {
    this.set("proposer", Value.fromString(value));
  }
}

export class ProposalQueued extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProposalQueued entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProposalQueued entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProposalQueued", id.toString(), this);
  }

  static load(id: string): ProposalQueued | null {
    return store.get("ProposalQueued", id) as ProposalQueued | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get governor(): string {
    let value = this.get("governor");
    return value.toString();
  }

  set governor(value: string) {
    this.set("governor", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get eta(): BigInt {
    let value = this.get("eta");
    return value.toBigInt();
  }

  set eta(value: BigInt) {
    this.set("eta", Value.fromBigInt(value));
  }
}

export class ProposalExecuted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProposalExecuted entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProposalExecuted entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProposalExecuted", id.toString(), this);
  }

  static load(id: string): ProposalExecuted | null {
    return store.get("ProposalExecuted", id) as ProposalExecuted | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get governor(): string {
    let value = this.get("governor");
    return value.toString();
  }

  set governor(value: string) {
    this.set("governor", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }
}

export class ProposalCanceled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProposalCanceled entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProposalCanceled entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProposalCanceled", id.toString(), this);
  }

  static load(id: string): ProposalCanceled | null {
    return store.get("ProposalCanceled", id) as ProposalCanceled | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get governor(): string {
    let value = this.get("governor");
    return value.toString();
  }

  set governor(value: string) {
    this.set("governor", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }
}

export class VoteCast extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VoteCast entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VoteCast entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VoteCast", id.toString(), this);
  }

  static load(id: string): VoteCast | null {
    return store.get("VoteCast", id) as VoteCast | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get governor(): string {
    let value = this.get("governor");
    return value.toString();
  }

  set governor(value: string) {
    this.set("governor", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get receipt(): string {
    let value = this.get("receipt");
    return value.toString();
  }

  set receipt(value: string) {
    this.set("receipt", Value.fromString(value));
  }

  get voter(): string {
    let value = this.get("voter");
    return value.toString();
  }

  set voter(value: string) {
    this.set("voter", Value.fromString(value));
  }
}

export class NewGovernanceAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NewGovernanceAdmin entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NewGovernanceAdmin entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NewGovernanceAdmin", id.toString(), this);
  }

  static load(id: string): NewGovernanceAdmin | null {
    return store.get("NewGovernanceAdmin", id) as NewGovernanceAdmin | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get governor(): string {
    let value = this.get("governor");
    return value.toString();
  }

  set governor(value: string) {
    this.set("governor", Value.fromString(value));
  }

  get oldAdmin(): string {
    let value = this.get("oldAdmin");
    return value.toString();
  }

  set oldAdmin(value: string) {
    this.set("oldAdmin", Value.fromString(value));
  }

  get newAdmin(): string {
    let value = this.get("newAdmin");
    return value.toString();
  }

  set newAdmin(value: string) {
    this.set("newAdmin", Value.fromString(value));
  }
}

export class NewGovernancePendingAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save NewGovernancePendingAdmin entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NewGovernancePendingAdmin entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NewGovernancePendingAdmin", id.toString(), this);
  }

  static load(id: string): NewGovernancePendingAdmin | null {
    return store.get(
      "NewGovernancePendingAdmin",
      id
    ) as NewGovernancePendingAdmin | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get governor(): string {
    let value = this.get("governor");
    return value.toString();
  }

  set governor(value: string) {
    this.set("governor", Value.fromString(value));
  }

  get oldPendingAdmin(): string {
    let value = this.get("oldPendingAdmin");
    return value.toString();
  }

  set oldPendingAdmin(value: string) {
    this.set("oldPendingAdmin", Value.fromString(value));
  }

  get newPendingAdmin(): string {
    let value = this.get("newPendingAdmin");
    return value.toString();
  }

  set newPendingAdmin(value: string) {
    this.set("newPendingAdmin", Value.fromString(value));
  }
}

export class NewGovernanceImplementation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save NewGovernanceImplementation entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NewGovernanceImplementation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NewGovernanceImplementation", id.toString(), this);
  }

  static load(id: string): NewGovernanceImplementation | null {
    return store.get(
      "NewGovernanceImplementation",
      id
    ) as NewGovernanceImplementation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get governor(): string {
    let value = this.get("governor");
    return value.toString();
  }

  set governor(value: string) {
    this.set("governor", Value.fromString(value));
  }

  get oldImplementation(): string {
    let value = this.get("oldImplementation");
    return value.toString();
  }

  set oldImplementation(value: string) {
    this.set("oldImplementation", Value.fromString(value));
  }

  get newImplementation(): string {
    let value = this.get("newImplementation");
    return value.toString();
  }

  set newImplementation(value: string) {
    this.set("newImplementation", Value.fromString(value));
  }
}

export class ProposalThresholdSet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ProposalThresholdSet entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProposalThresholdSet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProposalThresholdSet", id.toString(), this);
  }

  static load(id: string): ProposalThresholdSet | null {
    return store.get("ProposalThresholdSet", id) as ProposalThresholdSet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get governor(): string {
    let value = this.get("governor");
    return value.toString();
  }

  set governor(value: string) {
    this.set("governor", Value.fromString(value));
  }

  get oldProposalThreshold(): BigInt {
    let value = this.get("oldProposalThreshold");
    return value.toBigInt();
  }

  set oldProposalThreshold(value: BigInt) {
    this.set("oldProposalThreshold", Value.fromBigInt(value));
  }

  get newProposalThreshold(): BigInt {
    let value = this.get("newProposalThreshold");
    return value.toBigInt();
  }

  set newProposalThreshold(value: BigInt) {
    this.set("newProposalThreshold", Value.fromBigInt(value));
  }
}

export class VotingDelaySet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VotingDelaySet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VotingDelaySet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VotingDelaySet", id.toString(), this);
  }

  static load(id: string): VotingDelaySet | null {
    return store.get("VotingDelaySet", id) as VotingDelaySet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get governor(): string {
    let value = this.get("governor");
    return value.toString();
  }

  set governor(value: string) {
    this.set("governor", Value.fromString(value));
  }

  get oldVotingDelay(): BigInt {
    let value = this.get("oldVotingDelay");
    return value.toBigInt();
  }

  set oldVotingDelay(value: BigInt) {
    this.set("oldVotingDelay", Value.fromBigInt(value));
  }

  get newVotingDelay(): BigInt {
    let value = this.get("newVotingDelay");
    return value.toBigInt();
  }

  set newVotingDelay(value: BigInt) {
    this.set("newVotingDelay", Value.fromBigInt(value));
  }
}

export class VotingPeriodSet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VotingPeriodSet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VotingPeriodSet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VotingPeriodSet", id.toString(), this);
  }

  static load(id: string): VotingPeriodSet | null {
    return store.get("VotingPeriodSet", id) as VotingPeriodSet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get governor(): string {
    let value = this.get("governor");
    return value.toString();
  }

  set governor(value: string) {
    this.set("governor", Value.fromString(value));
  }

  get oldVotingPeriod(): BigInt {
    let value = this.get("oldVotingPeriod");
    return value.toBigInt();
  }

  set oldVotingPeriod(value: BigInt) {
    this.set("oldVotingPeriod", Value.fromBigInt(value));
  }

  get newVotingPeriod(): BigInt {
    let value = this.get("newVotingPeriod");
    return value.toBigInt();
  }

  set newVotingPeriod(value: BigInt) {
    this.set("newVotingPeriod", Value.fromBigInt(value));
  }
}

export class Timelock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Timelock entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Timelock entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Timelock", id.toString(), this);
  }

  static load(id: string): Timelock | null {
    return store.get("Timelock", id) as Timelock | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get admin(): string | null {
    let value = this.get("admin");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set admin(value: string | null) {
    if (value === null) {
      this.unset("admin");
    } else {
      this.set("admin", Value.fromString(value as string));
    }
  }

  get pendingAdmin(): string | null {
    let value = this.get("pendingAdmin");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pendingAdmin(value: string | null) {
    if (value === null) {
      this.unset("pendingAdmin");
    } else {
      this.set("pendingAdmin", Value.fromString(value as string));
    }
  }

  get delay(): BigInt | null {
    let value = this.get("delay");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set delay(value: BigInt | null) {
    if (value === null) {
      this.unset("delay");
    } else {
      this.set("delay", Value.fromBigInt(value as BigInt));
    }
  }

  get GRACE_PERIOD(): BigInt | null {
    let value = this.get("GRACE_PERIOD");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set GRACE_PERIOD(value: BigInt | null) {
    if (value === null) {
      this.unset("GRACE_PERIOD");
    } else {
      this.set("GRACE_PERIOD", Value.fromBigInt(value as BigInt));
    }
  }

  get MINIMUM_DELAY(): BigInt | null {
    let value = this.get("MINIMUM_DELAY");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set MINIMUM_DELAY(value: BigInt | null) {
    if (value === null) {
      this.unset("MINIMUM_DELAY");
    } else {
      this.set("MINIMUM_DELAY", Value.fromBigInt(value as BigInt));
    }
  }

  get MAXIMUM_DELAY(): BigInt | null {
    let value = this.get("MAXIMUM_DELAY");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set MAXIMUM_DELAY(value: BigInt | null) {
    if (value === null) {
      this.unset("MAXIMUM_DELAY");
    } else {
      this.set("MAXIMUM_DELAY", Value.fromBigInt(value as BigInt));
    }
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }

  get transactionsQueued(): Array<string> {
    let value = this.get("transactionsQueued");
    return value.toStringArray();
  }

  set transactionsQueued(value: Array<string>) {
    this.set("transactionsQueued", Value.fromStringArray(value));
  }

  get transactionsExecuted(): Array<string> {
    let value = this.get("transactionsExecuted");
    return value.toStringArray();
  }

  set transactionsExecuted(value: Array<string>) {
    this.set("transactionsExecuted", Value.fromStringArray(value));
  }

  get transactionsCanceled(): Array<string> {
    let value = this.get("transactionsCanceled");
    return value.toStringArray();
  }

  set transactionsCanceled(value: Array<string>) {
    this.set("transactionsCanceled", Value.fromStringArray(value));
  }

  get newAdmins(): Array<string> {
    let value = this.get("newAdmins");
    return value.toStringArray();
  }

  set newAdmins(value: Array<string>) {
    this.set("newAdmins", Value.fromStringArray(value));
  }

  get newPendingAdmins(): Array<string> {
    let value = this.get("newPendingAdmins");
    return value.toStringArray();
  }

  set newPendingAdmins(value: Array<string>) {
    this.set("newPendingAdmins", Value.fromStringArray(value));
  }

  get delaySet(): Array<string> {
    let value = this.get("delaySet");
    return value.toStringArray();
  }

  set delaySet(value: Array<string>) {
    this.set("delaySet", Value.fromStringArray(value));
  }
}

export class TimelockTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TimelockTransaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TimelockTransaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TimelockTransaction", id.toString(), this);
  }

  static load(id: string): TimelockTransaction | null {
    return store.get("TimelockTransaction", id) as TimelockTransaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get timelock(): string {
    let value = this.get("timelock");
    return value.toString();
  }

  set timelock(value: string) {
    this.set("timelock", Value.fromString(value));
  }

  get target(): string | null {
    let value = this.get("target");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set target(value: string | null) {
    if (value === null) {
      this.unset("target");
    } else {
      this.set("target", Value.fromString(value as string));
    }
  }

  get value(): BigInt | null {
    let value = this.get("value");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt | null) {
    if (value === null) {
      this.unset("value");
    } else {
      this.set("value", Value.fromBigInt(value as BigInt));
    }
  }

  get signature(): string | null {
    let value = this.get("signature");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signature(value: string | null) {
    if (value === null) {
      this.unset("signature");
    } else {
      this.set("signature", Value.fromString(value as string));
    }
  }

  get data(): Bytes | null {
    let value = this.get("data");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes | null) {
    if (value === null) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBytes(value as Bytes));
    }
  }

  get eta(): BigInt | null {
    let value = this.get("eta");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eta(value: BigInt | null) {
    if (value === null) {
      this.unset("eta");
    } else {
      this.set("eta", Value.fromBigInt(value as BigInt));
    }
  }

  get canceled(): boolean {
    let value = this.get("canceled");
    return value.toBoolean();
  }

  set canceled(value: boolean) {
    this.set("canceled", Value.fromBoolean(value));
  }

  get executed(): boolean {
    let value = this.get("executed");
    return value.toBoolean();
  }

  set executed(value: boolean) {
    this.set("executed", Value.fromBoolean(value));
  }
}

export class TimelockQueueTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TimelockQueueTransaction entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TimelockQueueTransaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TimelockQueueTransaction", id.toString(), this);
  }

  static load(id: string): TimelockQueueTransaction | null {
    return store.get(
      "TimelockQueueTransaction",
      id
    ) as TimelockQueueTransaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get timelock(): string {
    let value = this.get("timelock");
    return value.toString();
  }

  set timelock(value: string) {
    this.set("timelock", Value.fromString(value));
  }

  get tx(): string {
    let value = this.get("tx");
    return value.toString();
  }

  set tx(value: string) {
    this.set("tx", Value.fromString(value));
  }
}

export class TimelockExecuteTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TimelockExecuteTransaction entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TimelockExecuteTransaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TimelockExecuteTransaction", id.toString(), this);
  }

  static load(id: string): TimelockExecuteTransaction | null {
    return store.get(
      "TimelockExecuteTransaction",
      id
    ) as TimelockExecuteTransaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get timelock(): string {
    let value = this.get("timelock");
    return value.toString();
  }

  set timelock(value: string) {
    this.set("timelock", Value.fromString(value));
  }

  get tx(): string {
    let value = this.get("tx");
    return value.toString();
  }

  set tx(value: string) {
    this.set("tx", Value.fromString(value));
  }
}

export class TimelockCancelTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TimelockCancelTransaction entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TimelockCancelTransaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TimelockCancelTransaction", id.toString(), this);
  }

  static load(id: string): TimelockCancelTransaction | null {
    return store.get(
      "TimelockCancelTransaction",
      id
    ) as TimelockCancelTransaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get timelock(): string {
    let value = this.get("timelock");
    return value.toString();
  }

  set timelock(value: string) {
    this.set("timelock", Value.fromString(value));
  }

  get tx(): string {
    let value = this.get("tx");
    return value.toString();
  }

  set tx(value: string) {
    this.set("tx", Value.fromString(value));
  }
}

export class NewTimelockDelay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NewTimelockDelay entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NewTimelockDelay entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NewTimelockDelay", id.toString(), this);
  }

  static load(id: string): NewTimelockDelay | null {
    return store.get("NewTimelockDelay", id) as NewTimelockDelay | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get timelock(): string {
    let value = this.get("timelock");
    return value.toString();
  }

  set timelock(value: string) {
    this.set("timelock", Value.fromString(value));
  }

  get newDelay(): BigInt {
    let value = this.get("newDelay");
    return value.toBigInt();
  }

  set newDelay(value: BigInt) {
    this.set("newDelay", Value.fromBigInt(value));
  }
}

export class NewTimelockAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NewTimelockAdmin entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NewTimelockAdmin entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NewTimelockAdmin", id.toString(), this);
  }

  static load(id: string): NewTimelockAdmin | null {
    return store.get("NewTimelockAdmin", id) as NewTimelockAdmin | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get timelock(): string {
    let value = this.get("timelock");
    return value.toString();
  }

  set timelock(value: string) {
    this.set("timelock", Value.fromString(value));
  }

  get newAdmin(): string {
    let value = this.get("newAdmin");
    return value.toString();
  }

  set newAdmin(value: string) {
    this.set("newAdmin", Value.fromString(value));
  }
}

export class NewTimelockPendingAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save NewTimelockPendingAdmin entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NewTimelockPendingAdmin entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NewTimelockPendingAdmin", id.toString(), this);
  }

  static load(id: string): NewTimelockPendingAdmin | null {
    return store.get(
      "NewTimelockPendingAdmin",
      id
    ) as NewTimelockPendingAdmin | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get timelock(): string {
    let value = this.get("timelock");
    return value.toString();
  }

  set timelock(value: string) {
    this.set("timelock", Value.fromString(value));
  }

  get newPendingAdmin(): string {
    let value = this.get("newPendingAdmin");
    return value.toString();
  }

  set newPendingAdmin(value: string) {
    this.set("newPendingAdmin", Value.fromString(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (value === null) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(value as string));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get balances(): Array<string> {
    let value = this.get("balances");
    return value.toStringArray();
  }

  set balances(value: Array<string>) {
    this.set("balances", Value.fromStringArray(value));
  }

  get transfers(): Array<string> {
    let value = this.get("transfers");
    return value.toStringArray();
  }

  set transfers(value: Array<string>) {
    this.set("transfers", Value.fromStringArray(value));
  }

  get approvals(): Array<string> {
    let value = this.get("approvals");
    return value.toStringArray();
  }

  set approvals(value: Array<string>) {
    this.set("approvals", Value.fromStringArray(value));
  }
}

export class Balance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Balance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Balance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Balance", id.toString(), this);
  }

  static load(id: string): Balance | null {
    return store.get("Balance", id) as Balance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }

  get valueExact(): BigInt {
    let value = this.get("valueExact");
    return value.toBigInt();
  }

  set valueExact(value: BigInt) {
    this.set("valueExact", Value.fromBigInt(value));
  }

  get voting(): string {
    let value = this.get("voting");
    return value.toString();
  }

  set voting(value: string) {
    this.set("voting", Value.fromString(value));
  }

  get votingExact(): BigInt {
    let value = this.get("votingExact");
    return value.toBigInt();
  }

  set votingExact(value: BigInt) {
    this.set("votingExact", Value.fromBigInt(value));
  }

  get delegate(): string | null {
    let value = this.get("delegate");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set delegate(value: string | null) {
    if (value === null) {
      this.unset("delegate");
    } else {
      this.set("delegate", Value.fromString(value as string));
    }
  }

  get delegatorsCount(): i32 {
    let value = this.get("delegatorsCount");
    return value.toI32();
  }

  set delegatorsCount(value: i32) {
    this.set("delegatorsCount", Value.fromI32(value));
  }

  get transfersFrom(): Array<string> {
    let value = this.get("transfersFrom");
    return value.toStringArray();
  }

  set transfersFrom(value: Array<string>) {
    this.set("transfersFrom", Value.fromStringArray(value));
  }

  get transfersTo(): Array<string> {
    let value = this.get("transfersTo");
    return value.toStringArray();
  }

  set transfersTo(value: Array<string>) {
    this.set("transfersTo", Value.fromStringArray(value));
  }

  get delegators(): Array<string> {
    let value = this.get("delegators");
    return value.toStringArray();
  }

  set delegators(value: Array<string>) {
    this.set("delegators", Value.fromStringArray(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transfer", id.toString(), this);
  }

  static load(id: string): Transfer | null {
    return store.get("Transfer", id) as Transfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get fromBalance(): string | null {
    let value = this.get("fromBalance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fromBalance(value: string | null) {
    if (value === null) {
      this.unset("fromBalance");
    } else {
      this.set("fromBalance", Value.fromString(value as string));
    }
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get toBalance(): string | null {
    let value = this.get("toBalance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set toBalance(value: string | null) {
    if (value === null) {
      this.unset("toBalance");
    } else {
      this.set("toBalance", Value.fromString(value as string));
    }
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }
}

export class Approval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Approval entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Approval entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Approval", id.toString(), this);
  }

  static load(id: string): Approval | null {
    return store.get("Approval", id) as Approval | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get spender(): string {
    let value = this.get("spender");
    return value.toString();
  }

  set spender(value: string) {
    this.set("spender", Value.fromString(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }
}

export class DelegateChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DelegateChanged entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DelegateChanged entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DelegateChanged", id.toString(), this);
  }

  static load(id: string): DelegateChanged | null {
    return store.get("DelegateChanged", id) as DelegateChanged | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get delegator(): string {
    let value = this.get("delegator");
    return value.toString();
  }

  set delegator(value: string) {
    this.set("delegator", Value.fromString(value));
  }

  get fromDelegate(): string {
    let value = this.get("fromDelegate");
    return value.toString();
  }

  set fromDelegate(value: string) {
    this.set("fromDelegate", Value.fromString(value));
  }

  get toDelegate(): string {
    let value = this.get("toDelegate");
    return value.toString();
  }

  set toDelegate(value: string) {
    this.set("toDelegate", Value.fromString(value));
  }
}

export class DelegateVotesChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save DelegateVotesChanged entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DelegateVotesChanged entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DelegateVotesChanged", id.toString(), this);
  }

  static load(id: string): DelegateVotesChanged | null {
    return store.get("DelegateVotesChanged", id) as DelegateVotesChanged | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get delegate(): string {
    let value = this.get("delegate");
    return value.toString();
  }

  set delegate(value: string) {
    this.set("delegate", Value.fromString(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    return value.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }
}

export class DecimalValue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DecimalValue entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DecimalValue entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DecimalValue", id.toString(), this);
  }

  static load(id: string): DecimalValue | null {
    return store.get("DecimalValue", id) as DecimalValue | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get exact(): BigInt {
    let value = this.get("exact");
    return value.toBigInt();
  }

  set exact(value: BigInt) {
    this.set("exact", Value.fromBigInt(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}

export class PersistentStringArray extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save PersistentStringArray entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PersistentStringArray entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PersistentStringArray", id.toString(), this);
  }

  static load(id: string): PersistentStringArray | null {
    return store.get(
      "PersistentStringArray",
      id
    ) as PersistentStringArray | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get values(): Array<string> {
    let value = this.get("values");
    return value.toStringArray();
  }

  set values(value: Array<string>) {
    this.set("values", Value.fromStringArray(value));
  }
}

export class PersistentString extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PersistentString entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PersistentString entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PersistentString", id.toString(), this);
  }

  static load(id: string): PersistentString | null {
    return store.get("PersistentString", id) as PersistentString | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }
}
